#!/bin/bash

#
# Archstall2 Arch Linux installer made by PowerMan2206.
# Meant to be run through the other script, don't run on it's own
#

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
end=$(tput sgr0)

# set the variables
boot=$(cat /bootmode)
disk=$(cat /diskthing)
dm=$(cat /dm)
de=$(cat /de)
fs=$(cat /fs)

while true; do
# select timezone region
ls /usr/share/zoneinfo
echo ""
read -rp "Select your ${yellow}region$end: " region

if [[ -d /usr/share/zoneinfo/"$region" ]]; then
	while true; do
	# same but for city
	echo ""
	ls /usr/share/zoneinfo/"$region"
	echo ""
	read -rp "Select your ${yellow}city$end: " city
	
	if [[ -f /usr/share/zoneinfo/"$region"/"$city" ]]; then
		echo ""
		echo "Setting the ${bold}timezone$end..."
		ln -sf /usr/share/zoneinfo/"$region"/"$city" /etc/localtime
		break
	else :
		echo "${red}Invalid option!$end"
	fi
	
	done # while loop
	break

elif [[ -f /usr/share/zoneinfo/"$region" ]]; then
	echo "Setting the ${bold}timezone$end..."
	ln -sf /usr/share/zoneinfo/"$region" /etc/localtime
	break

else : 
	echo "${red}Invalid option!$end"
	echo ""
fi

done # while loop

echo ""

# somethingsomething time
echo "Generating ${bold}/etc/adjtime$end..."
hwclock --systohc

echo ""

# locale stuff (???)
echo "Setting the ${bold}locale$end..."
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

echo ""

read -rp "${yellow}hostname$end [localhost] : " hostname
echo ""
echo "Setting the ${yellow}hostname$end..."
case $hostname in
	"" ) echo localhost > /etc/hostname ;;
	*  ) echo "$hostname" > /etc/hostname ;;
esac

echo ""

echo "Setting the ${red}root$end password..."
passwd

echo ""

while true; do
read -rp "Add a ${blue}user$end? [y] " user
case $user in
	yes | y | "" )
		read -rp "What do you want to name your ${blue}user$end? [user] " username
		case $username in
				"" ) username="user" ;;
		esac

		useradd -m "$username"
		echo "Setting the ${blue}user$end password..."
		passwd $username
		
		# create sudo group
		groupadd sudo
		# adding user to sudo group and making the sudo group have sudo stuff
		gpasswd -a "$username" sudo
		sed -i 's/# %sudo/%sudo/' /etc/sudoers
		
		while true; do
		# AUR helper
		read -rp "Install ${yellow}paru$end? [n] " aur
		case $aur in
			yes | y )
				pacman -S git --noconfirm
				cd /home/$username
				sudo -u $username git clone https://aur.archlinux.org/paru-bin.git
				cd paru-bin
				sudo -u $username makepkg -si --noconfirm
				cd ..
				rm -rf paru-bin
				break
				;;
				
			no | n | "" )
				echo "Skipping..."
				break
				;;
				
			* )
				echo "${red}Invalid option!$end"
				echo ""
				;;
				
		esac
		done # while loop
		
		break
		;;
		
	no | n )
		echo "Skipping..."
		break
		;;
	
	* )
		echo "${red}Invalid option!$end"
		echo ""
		;;
	
esac 
done # while loop

clear

while true; do
# network setup
read -rp "Configure ${yellow}(s)ystemd-networkd$end, ${yellow}(N)etworkManager$end, or (s)kip? [systemd-networkd] " network

case $network in
	systemd-networkd | s | "" )
		echo ""
		# takes the long `ip a` output and shortens it down to just the interfaces
		ip a | grep "<" | cut -d':' -f2 | cut -c 2-
		echo ""
		read -rp "Select your ${yellow}interface$end: " interface
		
		echo ""
		
		echo "Enabling needed services and writing configuration file..."
		systemctl enable systemd-networkd systemd-resolved
		echo "[Match]" >> /etc/systemd/network/20-wired.network
		echo "Name=$interface" >> /etc/systemd/network/20-wired.network
		echo "[Network]" >> /etc/systemd/network/20-wired.network
		echo "DHCP=yes" >> /etc/systemd/network/20-wired.network
		
		break
		;;

	NetworkManager | networkmanager | N | n )
		echo ""
		echo "Installing NetworkManager..."
		pacman -S networkmanager --noconfirm
		echo ""
		echo "Enabling the needed service..."
		systemctl enable NetworkManager

		break
		;;
		
	skip | s )
		echo "Skipping..."
		break
		;;
	
	* )
		echo "${red}Invalid option!$end"
		echo ""
		;;
esac
done # while loop

echo ""

while true; do
# swapfile
read -rp "Use a ${yellow}Swapfile$end? [y] " swap
echo ""

case $swap in
	yes | y | "" )
		read -rp "Swapfile size (in MiB) [1024]: " swapsize

		# if no input is given, default to 1024
		case "$swapsize" in
			"" ) swapsize=1024 ;;
		esac
		
		echo "Making Swap..."
		case $fs in
			btrfs )
				echo "Swapfiles aren't supported on btrfs"
				echo "(well I can't get them to work)"
				break
				;;
			* )	
				dd if=/dev/zero of=/swapfile bs=1M count=$swapsize status=progress
				chmod 600 /swapfile
				mkswap /swapfile
				swapon /swapfile
				echo "/swapfile none swap defaults 0 0" >> /etc/fstab
				break
				;;		
		esac
		
		echo ""
		break
		;;
		
	no | n )
		echo "Skipping..."
		break
		;;
	
	* )
		echo "${red}Invalid option!$end"
		echo ""
		;;
				
esac
done # while loop

# enable services
case $de in
	y )
		echo "Enabling the DE-specific service..."
		systemctl enable "$dm"
		;;
esac

echo ""

while true; do
# read CPU vendor (for microcode)
read -rp "${blue}Intel$end or ${red}AMD$end CPU? (lowercase pls) " cpu

case $cpu in
	intel | amd )
		break
		;;
	a )
		cpu=amd
		break
		;;
	i )
		cpu=intel
		break
		;;
	* )	
		echo "${red}Invalid option!$end"
		echo ""
		;;
esac
done # while loop

# bootloader
echo "Installing GRUB..."
echo ""

# different installation methods based on the boot mode
case $boot in
	uefi )
		pacman -S grub efibootmgr "$cpu"-ucode --noconfirm
		echo ""
		grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
		echo ""
		grub-mkconfig -o /boot/grub/grub.cfg
		;;
	
	bios )
		pacman -S grub "$cpu"-ucode --noconfirm
		echo ""
		grub-install /dev/"$disk"
		echo ""
		grub-mkconfig -o /boot/grub/grub.cfg
		;;
esac

exit
