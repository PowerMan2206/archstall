#!/bin/bash
# Archstall Arch Linux installer made by PowerMan2206

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
italic=$(tput sitm)
end=$(tput sgr0)

mountpoint=/mnt

#functions
error() {
	echo "${bold}${red}ERROR:$end $1"
}

invalidoption() {
	error "invalid option!"
}

namepartition() {
	lsblk -rno name | grep "$disk" | sed 1d | sed -n "$1"p
}

autocomplete() {
	cd $(mktemp -d)
	touch $@
}

clear 

echo "${bold}${green}Archstall Arch Linux installer$end"
echo "${red}This script comes with no warranty, screwing up your system is your fault$end"

echo
read -n 1 -sp "Press any key to continue... "
echo; echo

# delet packages file if it already exists
# (little dev stuff)
# ((yes it already gets nuked at the end but shush))
if [[ -f packages ]]; then rm packages; fi

# check the boot mode
if [[ -d /sys/firmware/efi/efivars ]]; then
	echo "System booted in ${bold}UEFI$end mode"
	uefi=true
else
	# notify user is booted in BIOS
	echo "System booted in ${bold}BIOS$end mode"
	echo "Reboot into ${bold}UEFI$end mode if you want to install for that."
fi

echo
read -n 1 -sp "Press any key to continue or Ctrl+C to cancel..."
echo; echo

# set the system clock and wait a bit for the messages
echo "Ensuring the system clock is accurate..."
timedatectl set-ntp true || exit; sleep 1

clear

# unmount any thing in the mountpoint
if [[ $(findmnt "$mountpoint") ]]; then
	echo "Unmounting disks in $mountpoint..."
	umount -R "$mountpoint" || exit
	echo
fi

# for read tab autocomplete
cd /dev

# choose disk
lsblk -dno name,size
echo
while true; do
	read -ep "Select the ${yellow}disk$end you want to use: /dev/" disk
	if   [[ "$(lsblk -dno name)" != *"$disk"* ]] || [[ "$disk" == "" ]]; then 
		error "disk doesn't exist!"
		echo
	elif [[ "$(lsblk -dno name)" == *"$disk"* ]]; then 
		break
	fi
done

# partition disk
while true; do
	autocomplete automatic manual skip
	read -ep "(a)utomatic, (m)anual, or (s)kip disk partitioning? [automatic] " partitioning
	echo
	
	case $partitioning in
		a | automatic | "" )
			if [[ -n "$uefi" ]]; then
				echo "The disk will be partitioned into a 512M ${bold}EFI partition$end and a ${bold}root partition$end that takes up the rest"
			else
				echo "The disk will be partitioned into a single ${bold}root partition$end taking up the entire disk"
			fi
			
			echo
			echo "${bold}${red}WARNING: THIS WILL ERASE EVERYTHING ON THE SELECTED DISK$end"
			read -sp "${red}Are you sure you want to continue?$end You can cancel with Ctrl+C"
			echo
			echo -n "${red}Erasing disk in "
			
			# hell yeah, complications
			for delet in {5..1}; do
				echo -n $delet
				for dot in {1..3}; do
					sleep 0.25
					echo -n .
				done
				sleep 0.5
				echo -n " "
			done
			echo "$end"
			
			echo
			
			if [[ -n "$uefi" ]]; then
				parted -s /dev/"$disk" mklabel gpt || exit
				
				# make EFI partition
				echo "${green}Making the ${bold}EFI partition...$end"
				parted -s /dev/"$disk" mkpart P1 1MiB 512MiB || exit
				efipartition="$(namepartition 1)"
				
				# format EFI partition
				echo "${green}Formatting the EFI partition...$end"
				mkfs.fat -F32 /dev/"$efipartition"

				echo
				
				# make root partition
				echo "${green}Making the ${bold}root partition...$end"
				parted -s /dev/"$disk" mkpart P2 512MiB 100% || exit
				rootpartition="$(namepartition 2)"
			
			else
				parted -s /dev/"$disk" mklabel msdos || exit
				
				# make root partition
				echo "${green}Making the ${bold}root partition...$end"
				parted -s /dev/"$disk" mkpart primary 1MiB 100% || exit
				parted -s /dev/"$disk" set 1 boot on || exit
				rootpartition="$(namepartition 1)"
			fi
			
			break
			;;
		
		m | manual | s | skip )
			case $partitioning in
				m | manual )
					
					autocomplete fdisk cfdisk parted
					
					while true; do
					read -ep "Do you want to use (f)disk, (c)fdisk or (p)arted? [fdisk] " partitioner
					echo
					
					case "$partitioner" in
						f | fdisk | "" ) fdisk /dev/"$disk" || exit; break ;;
						c | cfdisk ) cfdisk /dev/"$disk" || exit; break ;;
						p | parted ) parted /dev/"$disk" || exit; break ;;
						* ) invalidoption ;;	
					esac
					done # while loop
					
					clear
					;;
				s | skip ) echo "Skipping..." ;;
			esac
			
			echo
			
			# this again
			cd /dev
			
			partitions="$(lsblk -rno name,size | grep "$disk" | sed 1d)"
			echo "$partitions"
			echo
			
			while true; do
				read -ep "What's the ${bold}root partition${end}? /dev/" rootpartition
				if [[ "$partitions" != *"$rootpartition"* ]] || [[ "$rootpartition" == "" ]] || [[ "$rootpartition" == "$disk" ]]; then
					error "partition doesn't exist!"
					echo
				else break
				fi
			done # while loop
			
			if [[ -n "$uefi" ]]; then
				echo
				efipartitions="$(lsblk -rno name,size | grep "$disk" | sed 1d | grep -v "$rootpartition")"
				echo "$efipartitions"
				echo
				
				while true; do
					read -ep "What's the ${bold}EFI partition${end}? /dev/" efipartition
					if [[ "$efipartitions" != *"$efipartition"* ]] || [[ "$efipartition" == "" ]] || [[ "$efipartition" == "$disk" ]]; then
						error "partition doesn't exist!"
						echo
					else
						while true; do
							echo
							echo "Do you want to format the ${bold}EFI partition?$end"
							read -p "Don't do this if you set it up beforehand [n] " formatefi
							
							case $formatefi in
								n | no | "" ) echo "${green}Skipping EFI partition formatting...$end"; break ;;
								y | yes )
									echo "${green}Formatting the EFI partition...$end"
									mkfs.fat -F32 "$efipartition"
									break
									;;
							esac
						done # while loop		# this
						break					# is
					fi							# a
				done # while loop				# beautiful
			fi									# mess
			break								# lmao
			;;
	esac
done

echo

# some luks stuff
while true; do
	read -p "Use LUKS1 encryption on the root partition? [n] " luks
	echo
	case "$luks" in
		y | yes )
			echo "${green}Encrypting /dev/$rootpartition...$end"
			while true; do
				if ! cryptsetup -y -q --type luks1 luksFormat /dev/"$rootpartition"; then echo
				else break
				fi
			done # while loop
			
			echo
			
			echo "${green}Opening /dev/$rootpartition...$end"
			while true; do
				if ! cryptsetup open /dev/"$rootpartition" cryptroot; then echo
				else break
				fi
			done # while loop
			
			# var stuff
			encrootpartition="mapper/cryptroot"
			oldrootpartition="$rootpartition"
			rootpartition="$encrootpartition"
			luks=true
			
			echo
			break
			;;
		n  | no | "" ) echo "Skipping..."; break ;;
	esac
done # while loop

clear

# TODO: clean up entire filesystem thing maybe
while true; do
	autocomplete ext4 f2fs xfs btrfs
	echo
	read -ep "Select the ${bold}root filesystem$end: (e)xt4, (f)2fs, (x)fs, (b)trfs [ext4] " filesystem
	case "$filesystem" in
		e | ext4 | "" | f | f2fs | b | btrfs | x | xfs ) break ;;
		* ) invalidoption ;;
	esac
done # while loop

echo "${green}Formatting the ${bold}root partition$end ${green}...$end"
echo
case "$filesystem" in
	e | "" | ext4 ) 
		mkfs.ext4 -F /dev/"$rootpartition" || exit 
		;;
	f | f2fs ) 
		mkfs.f2fs -f /dev/"$rootpartition" || exit 
		echo "f2fs-tools" >> packages
		;;
	b | btrfs )
		mkfs.btrfs -f /dev/"$rootpartition" || exit
		echo "btrfs-progs" >> packages
		;;
	x | xfs )
		mkfs.xfs -f /dev/"$rootpartition" || exit
		echo "xfsprogs" >> packages
		;;	
esac

echo

# mount partition/s
echo "${green}Mounting the partitions...$end"
mount /dev/"$rootpartition" "$mountpoint"
if [[ -n "$uefi" ]]; then
	mkdir "$mountpoint"/efi || exit
	mount /dev/"$efipartition" "$mountpoint"/efi || exit
fi

clear

echo "Updating the keyring..."
# yeahyeah -Sy bad
pacman --noconfirm -Sy archlinux-keyring || exit

echo

# create the package list
packages=/tmp/packages
packagesclean=/tmp/packagesclean
echo "${green}Writing the package list...$end"
cat << 'EOF' > $packages
linux
#linux-lts
linux-firmware
polkit

nano
#micro
#vim

neofetch
#man-db
#pipewire
EOF

echo

while true; do
	# edit package list
	echo "Add/uncomment packages which you want in the package list"
	echo "${yellow}Linux, the firmware, polkit, nano, and neofetch are installed by default$end"
	echo "(also base and base-devel but you can't remove those because the installer ${red}dies$end)"
	echo
	
	while true; do
		autocomplete nano vim skip
		read -ep "Do you want to edit the package list with (n)ano, (v)im, or (s)kip? [nano] " editor
		echo
		
		case "$editor" in
			n | nano | "" ) nano $packages; break ;;
			v | vim ) vim $packages; break ;;
			s | skip ) echo "${green}Skipping package list editing...$end"; break ;;
			* ) invalidoption ;;
		esac
	done # while loop
	
	echo
	
	# take the packages list and get rid of the comments
	echo "Cleaning up the package list..."
	grep -v "#" $packages > $packagesclean || exit
	
	echo
	
	# ask if user wants to enable parallel download for pacman/pacstrap
	while true; do
		read -ep "Enable ${yellow}parallel downloads$end for pacman? [y] " paralleldownloads
		case "$paralleldownloads" in
			y | yes | "" )
				sed -i 's/#ParallelDownloads/ParallelDownloads/g' /etc/pacman.conf
				break
				;;
			n | no )
				echo "Skipping..."
				break
				;;
		esac
	done # while loop

	clear

	# read the package list and install those packages
	echo "${green}Installing packages with pacstrap...$end"
	echo
	# using -P in case parallel downloads are used
	if ! pacstrap -P "$mountpoint" base base-devel - < $packagesclean; then
		echo
		echo "${red}Something went wrong!$end"
		echo "Read pacstrap message above"
		echo "Perhaps a space at the end of a package name?"
		read -n 1 -sp "Press any key to retry... "
		clear
	else break
	fi
done # while loop

# TODO: clean this up as well
declare -p uefi disk filesystem luks oldrootpartition rootpartition > "$mountpoint"/varstuff 2> /dev/null

echo

# make the fstab
echo "${green}Generating the fstab...$end"
genfstab -U "$mountpoint" > "$mountpoint"/etc/fstab || exit

clear

# write the second script
echo "${green}Writing the second script...$end"
echo

#----------------------------------------------------------------------------------------------------------------------
#======================================================================================================================
# START OF SCRIPT 2
cat << 'EOF' > "$mountpoint"/archstall2
#!/bin/bash

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
end=$(tput sgr0)

# source the variables
source /varstuff

# functions
error() {
	echo "${bold}${red}ERROR:$end $1"
}

invalidoption() {
	error "invalid option!"
}

autocomplete() {
	cd $(mktemp -d)
	touch $@
}

# select timezone stuff
cd /usr/share/zoneinfo; ls
echo

while true; do
	read -ep "Select your ${yellow}region$end: " timezone

	if [[ "$timezone" == "" ]] || [[ -d "$timezone" ]]; then invalidoption
	elif [[ -f /usr/share/zoneinfo/"$timezone" ]]; then
		echo
		echo "${green}Setting the ${bold}timezone$end${green}...$end"
		ln -sf /usr/share/zoneinfo/"$timezone" /etc/localtime
		break
	else invalidoption
	fi
done # while loop

echo

# somethingsomething time
echo "${green}Generating ${bold}/etc/adjtime$end${green}...$end"
hwclock --systohc || exit

echo

# locale stuff (???)
echo "${green}Setting the ${bold}locale$end${green}...$end"
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen
locale-gen || exit
echo "LANG=en_US.UTF-8" > /etc/locale.conf

clear

read -p "${yellow}hostname$end [localhost] : " hostname
echo "${green}Setting the$end ${yellow}hostname$end${green}...$end"
case "$hostname" in
	"" ) echo localhost > /etc/hostname ;;
	* ) echo "$hostname" > /etc/hostname ;;
esac

echo

# for some reason I really like this piece of code
# it's just so short and great, works perfectly
# I just think it's neat
echo "${red}Setting the root password...$end"
while true; do
	if ! passwd; then echo
	else break
	fi
done # while loop

echo

read -rp "${yellow}username$end: (empty for no user) " username
username="${username,,}"
case "$username" in
	"" ) echo "Skipping..." ;;
	* ) 
		echo "${green}Adding user$end ${yellow}$username$end"
		useradd -m "$username" || exit
		
		echo "${green}Setting the$end ${yellow}user$end ${green}password...$end"
		while true; do
			if ! passwd "$username"; then echo
			else break
			fi
		done # while loop
		
		# sudo stuff
		groupadd sudo
		gpasswd -a "$username" sudo
		sed -i 's/# %sudo/%sudo/g' /etc/sudoers
		
		while true; do
			# AUR helper
			read -p "Install ${yellow}paru$end? [n] " aur
			echo
			case "$aur" in
				y | yes )
					pacman -S git --noconfirm
					cd /home/"$username"
					sudo -u "$username" git clone https://aur.archlinux.org/paru-bin.git
					cd paru-bin
					sudo -u "$username" makepkg -si --noconfirm
					cd ..
					rm -rf paru-bin
					break
					;;
				
				n | no | "" ) echo "Skipping..."; break ;;
			esac
		done # while loop
		;;
esac

echo

while true; do
	# network setup
	autocomplete systemd-networkd networkmanager skip
	read -ep "Configure ${yellow}systemd-network(d)$end, ${yellow}(n)etworkmanager$end, or (s)kip? [systemd-networkd] " network
	echo
	
	case "$network" in
		d | systemd-networkd | "" )
			# takes the long `ip a` output and shortens it down to just the interfaces
			ip -brief address | cut -d' ' -f1 | grep -v lo
			interfaces="$(ip -brief address | cut -d' ' -f1 | grep -v lo)"
			echo
			
			# hacky way to get autocomplete because interfaces aren't files
			cd "$(mktemp -d)"
			for inter in "$interfaces"; do touch "$inter"; done
			
			while true; do
				read -ep "Select your ${yellow}interface$end: " interface
				if [[ "$interfaces" != *"$interface"* ]] || [[ "$interface" == "" ]]; then
					error "interface doesn't exist!"
					echo
				else break
				fi
			done # while loop
			
			echo
	
			# cat thing doesn't work for some reason
			echo "${green}Writing configuration file...$end"
			echo -e "[Match]\\nName=$interface\\n[Network]\\nDHCP=yes" >> /etc/systemd/network/wired-network.network
			# heck ye, oneliners
			
			echo "${green}Enabling services...$end"
			systemctl enable systemd-networkd systemd-resolved || exit
			
			break
			;;
		
		n | networkmanager )
			echo "${green}Installing NetworkManager...$end"
			pacman -S networkmanager --noconfirm || exit
			echo
			echo "${green}Enabling service...$end"
			systemctl enable NetworkManager || exit
			
			break
			;;
		
		s | skip ) echo "Skipping..."; break ;;
		* ) invalidoption ;;
	esac
done # while loop

echo

while true; do
	read -p "Use a ${blue}Swapfile$end? [n] " swap
	echo
	
	case "$swap" in
		y | yes )
			while true; do
			read -p "Swapfile size (in MiB) [1024]: " swapsize
				case "$swapsize" in
					"" ) 
						# btrfs stuff
						case "$filesystem" in
							b | btrfs )
								truncate -s 0 /swapfile || exit
								chattr +C /swapfile || exit
								btrfs property set /swapfile compression none || exit
								;;
						esac
						
						echo "${green}Making Swap...$end"
						dd if=/dev/zero of=/swapfile bs=1M count="$swapsize" status=progress || exit
						chmod 600 /swapfile
						mkswap /swapfile
						swapon /swapfile
						echo "/swapfile none swap defaults 0 0" >> /etc/fstab
						
						break
						;;
					
					*[!0-9]* )
						echo "Value not a number!"
						echo 
						;;
					* ) break ;;
				esac
				
			done # while loop
			swapstuff
			break
			;;	
		
		n | no | "" ) echo "Skipping..."; break ;;
		* ) invalidoption ;;
	esac
done # while loop

echo

# microcode stuff
echo "${green}Installing the CPU microcode...$end"
while true; do
	autocomplete amd intel skip
	read -ep "${blue}Intel$end or ${red}AMD$end CPU? " cpu
	echo
	case "$cpu" in
		a | amd ) pacman -S amd-ucode --noconfirm || exit; break ;;
		i | intel ) pacman -S intel-ucode --noconfirm || exit; break ;;
		skip ) echo "Skipping..."; break ;;
		* )	invalidoption ;;
	esac
	
done # while loop

echo

# bootloader
echo "${green}Installing GRUB...$end"
echo
pacman -S grub --noconfirm || exit

echo

# extra stuff needed for LUKS
if [[ "$luks" == true ]]; then
	echo "${green}Doing LUKS stuff...$end"
	
	rootuuid="$(lsblk -rno name,uuid | grep $oldrootpartition | cut -d' ' -f2)"
	sed -i 's/#GRUB_ENABLE_CRYPTODISK/GRUB_ENABLE_CRYPTODISK/g' /etc/default/grub
	sed -i "s/GRUB_CMDLINE_LINUX_DEFAULT=\"/GRUB_CMDLINE_LINUX_DEFAULT=\"cryptdevice=UUID=$rootuuid:cryptroot /g" /etc/default/grub

	# also does it on the comment but ehh
	sed -i 's/autodetect/autodetect keyboard keymap /g' /etc/mkinitcpio.conf
	sed -i 's/block/block encrypt /g' /etc/mkinitcpio.conf

	mkinitcpio -P || exit
	echo
fi

# different installation methods based on the boot mode
if [[ -n "$uefi" ]]; then
	pacman -S efibootmgr --noconfirm || exit
	echo
	grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB || exit
else grub-install /dev/"$disk" || exit
fi

echo

echo "${green}Writing GRUB configuration file...$end"
echo
grub-mkconfig -o /boot/grub/grub.cfg || exit

EOF
# END OF SCRIPT 2
#======================================================================================================================
#----------------------------------------------------------------------------------------------------------------------

chmod +x "$mountpoint"/archstall2

# chroot in and run the second script
echo "${green}Chrooting...$end"
echo
arch-chroot "$mountpoint" /archstall2 || exit

clear

# cleanup
echo "${green}Cleaning up files...$end"
rm "$mountpoint"/archstall2 "$mountpoint"/varstuff $packages $packagesclean

echo

# wait a bit because yes
sleep 1

# unmount the filesystems
echo "${green}Unmounting filesystem/s...$end"
umount -R "$mountpoint"

# luks stuff
if [[ "$luks" == true ]]; then cryptsetup close /dev/"$encrootpartition"; fi

echo

# end
echo "${bold}${green}Installation finished!$end"
read -n 1 -sp "Press any key to reboot... "
echo

reboot
