#!/bin/bash

#
# Archstall Arch Linux installer made by PowerMan2206.
#

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
italic=$(tput sitm)
end=$(tput sgr0)

# exit if a command fails
set -e

# some default vars
removable=n
device=regular
dm=n
de=n
mountpoint=/mnt
username=n
rootpartition=n
efipartition=n
fs=n

while getopts "hp:e:f:m:u:r" arg; do
	case $arg in
		h | help )
			echo "${bold}${green}Archstall Arch Linux installer $end"
			echo "${bold}This script is made by PowerMan2206"
			echo "https://github.com/PowerMan2206/archstall"
			echo ""
			echo "Usage:$end"
			echo "--help            -h              show this help menu and exit"
			echo "--root-partition  -p [partition]  partition on which to install Arch"
			echo "--efi-partition   -e [partition]  EFI partition ${bold}(UEFI systems only)$end"
			echo "--filesystem      -f [filesystem] Filesystem to use on the root partition ([ext4], btrfs, xfs)"
			echo "--mountpoint      -m [location]   root partition mountpoint [/mnt]"
			echo "--username        -u [username]   change default user username [n]"
			echo "--removable       -r              install on a removable device [n]"
			echo "running the script                runs the script in an \"interactive\" mode"
			echo ""
			echo "${italic}more coming soon maybe$end"
			echo ""
			
			exit
			;;
		
		p | root-partition ) 
			if [[ "$(lsblk)" == *"$OPTARG"* ]]; then
				rootpartition=$OPTARG
			else
				echo "${red}Root partition doesn't exist!$end"
				echo ""
				exit 1
			fi
			
			disk="$(lsblk -no pkname /dev/$rootpartition)"
			;;
		
		e | efi-partition )
			if [[ "$(lsblk)" == *"$OPTARG"* ]]; then
				efipartition=$OPTARG
			else
				echo "${red}EFI partition doesn't exist!$end"
				echo ""
				exit 1
			fi
			;;
			
		f | filesystem )
			case $OPTARG in
				ext4 | btrfs | xfs ) fs=$OPTARG ;;
				* ) 
					echo "${red}Invalid filesystem!$end"
					echo ""
					exit 1
					;;
			esac
			;;
			
		m | mountpoint ) mountpoint=$OPTARG ;;
		u | user ) username=${OPTARG,,} ;;
		r | removable ) removable=y; device=removable ;;
	esac
done

# some functions
selectfs() {
	case $fs in
		n )
			while true; do
			read -n 1 -rp "Select the ${bold}root filesystem$end: ext(4), (x)fs, (b)trfs [ext4] " fs
		
			case $fs in
			E | e | 4 | "" | B | b | X | x ) break ;;
			* )
				echo "${red}Invalid option!$end"
				echo ""
				;; 
			esac
			done # while loop
			;;
	esac
}

selectefipartition() {
	case $boot in
		uefi )
			# ask for the EFI partition
			while true; do
			read -rp "What's the ${bold}EFI partition${end}? /dev/" efipartition
			if [[ "$disks" == *"$efipartition"* ]]; then
				echo "${green}Formatting the ${bold}EFI partition$end ${green}to FAT32...$end"
				mkfs.fat -F32 /dev/"$efipartition"
				break
			else
				echo "${red}Partition doesn't exist!$end"
				echo ""
			fi
			done # while loop
			
			echo ""
			;;
	esac
}

selectpartitions() {
	disks=$(lsblk | grep "$disk")
	echo "$disks"
	echo ""
	selectefipartition
	
	# ask for the root partition
	while true; do
	read -rp "What's the ${bold}root partition${end}? /dev/" rootpartition
	if [[ "$disks" == *"$rootpartition"* ]]; then
		break
	else
		echo "${red}Partition doesn't exist!$end"
		echo ""
	fi
	done # while loop
}

clear

echo "${bold}${green}Archstall Arch Linux installer $end"
echo "${red}This script comes with no warranty, screwing up your system is your fault
You can cancel the script at any time by holding down Ctrl+C $end"
echo "Installation for a $device device"
echo ""
read -n 1 -rsp "Press any key to continue... "
echo ""; echo ""

# check the boot mode
if [[ -d /sys/firmware/efi/efivars ]]; then
	boot="uefi"
	echo "System booted in ${bold}UEFI$end mode"
else
	# notify user is booted in BIOS
	boot="bios"
	echo "System booted in ${bold}BIOS$end mode"
	echo "The installer will install Arch Linux in a way so that it's bootable in ${bold}BIOS$end mode."
	echo "Reboot into ${bold}UEFI$end mode if you want to install for that."
	echo ""
	read -n 1 -rsp "Press any key to continue or Ctrl+C to cancel..."
	echo ""
fi

echo ""

# set the system clock and wait a bit for the messages
echo "Ensuring the system clock is accurate..."
timedatectl set-ntp true; sleep 1 

clear

# unmount any thing in the mountpoint
if [[ $(findmnt $mountpoint) ]]; then
	echo "Unmounting disks in $mountpoint..."
	umount -R $mountpoint
	echo ""
fi
		
case $rootpartition in
	n )	
		# get the disk to partition
		lsblk
		echo ""
		
		while true; do
		read -rp "Select the disk you want to use ${red}(not a partition)$end /dev/" disk
		if [[ "$(lsblk)" == *"$disk"* ]]; then
			break
		else
			echo "${red}Disk doesn't exist!$end"
			echo ""
		fi
		done # while loop
		
		echo ""
		
		while true; do
		# automatic or manual disk partitioning?
		read -n 1 -rp "(a)utomatic, (m)anual, or (s)kip disk partitioning? [automatic] " partitioning 
		echo ""
		
		case $partitioning in
			# automatic partitioning
			A | a | "" )
				case $boot in
					uefi ) echo "The disk will be partitioned into a 512M ${bold}EFI partition$end (${disk}1) and the ${bold}root partition$end (${disk}2) taking up the rest" ;;
					bios ) echo "The disk will be partitioned into a single ${bold}root partition$end taking up the entire disk (${disk}1)" ;;
				esac
				
				echo ""
				
				echo "$bold${red}WARNING: THIS WILL ERASE EVERYTHING ON THE SELECTED DISK $end"
				read -rp "Are you sure you want to continue? You can cancel with Ctrl+C "
				
				echo "$red"
				
				# for loops are for nerds
				echo "Erasing disk in 5..."
				sleep 1
				echo "Erasing disk in 4..."
				sleep 1
				echo "Erasing disk in 3..."
				sleep 1
				echo "Erasing disk in 2..."
				sleep 1
				echo "Erasing disk in 1..."
				sleep 1
				echo "$end"
				
				case $boot in
					uefi )
						parted -s /dev/"$disk" mklabel gpt
						
						# make EFI partition
						echo "${green}Making the ${bold}EFI partition...$end"
						parted -s /dev/"$disk" mkpart P1 1MiB 512MiB
						
						# format EFI partition
						echo "${green}Formatting the ${bold}EFI partition$end ${green}to FAT32...$end"
						mkfs.fat -F32 /dev/"${disk}"1
						efipartition="${disk}"1
						
						echo ""
						
						# make root partition
						echo "${green}Making the ${bold}root partition...$end"
						parted -s /dev/"$disk" mkpart P2 512MiB 100%
						rootpartition="${disk}"2
						;;
					
					bios )
						parted -s /dev/"$disk" mklabel msdos
						
						# make root partition
						echo "${green}Making the ${bold}root partition...$end"
						parted -s /dev/"$disk" mkpart primary 1MiB 100%
						parted -s /dev/"$disk" set 1 boot on
						rootpartition="${disk}"1
						;;
				esac
				
				break
				;;
			
			# manual partitioning
			M | m )
				while true; do
				read -n 1 -rp "Do you want to use (f)disk, (c)fdisk or (p)arted? [fdisk] " partitioner
				echo ""
				
				case $partitioner in
					f | fdisk | "" ) fdisk /dev/"$disk"; break ;;
					c | cfdisk ) cfdisk /dev/"$disk"; break ;;
					p | parted ) parted /dev/"$disk"; break ;;
					* )
						echo "${red}Invalid option!$end"
						echo ""
						;;	
				esac
				done # while loop
				
				selectpartitions
				selectfs
				clear
				break
				;;
			
			S | s )
				echo "Skipping..."
				echo ""
				selectpartitions
				selectfs
				break
				;;
			
			* )
				echo "${red}Invalid option!$end"
				echo ""
				;;
		esac
		done # while loop
		;;

	* )
		case $efipartition in
			n ) 
				disks=$(lsblk | grep "$disk" | grep -v "$rootpartition")
				echo "$disks"
				echo ""
				selectefipartition 
				;;
		esac

		case $fs in
			n ) selectfs ;;
		esac
		;;
esac

echo ""	

case $fs in
	ext4 | E | e | 4 | "" )
		echo "${green}Formatting the ${bold}root partition$end ${green}to ext4...$end"
		mkfs.ext4 -q /dev/$rootpartition
		fs=ext4
		;;
	
	btrfs | B | b )
		echo "${green}Formatting the ${bold}root partition$end ${green}to btrfs...$end"
		mkfs.btrfs -f /dev/$rootpartition
		#btrfs subvolume create /
		fs=btrfs
		;;
	
	xfs | X | x )
		echo "${green}Formatting the ${bold}root partition$end ${green}to xfs...$end"
		mkfs.xfs -f -q /dev/$rootpartition
		echo "xfsprogs" >> packages
		fs=xfs
		;;	
esac

echo ""

# mount the partition/s
echo "Mounting the partitions..."
mount /dev/"$rootpartition" $mountpoint
case $boot in
	uefi )
		mkdir $mountpoint/efi
		mount /dev/"$efipartition" $mountpoint/efi
		;;
esac

clear

# create the package list
echo "Writing the package list..."
cat << 'EOF' >> packages
linux
#linux-lts
linux-firmware
polkit

nano
#micro
#vim

# window managers
#i3-gaps
#bspwm
#openbox
#xmonad
#awesome
#herbstluftwm

# desktop environments (best to choose only one)
# a display manager gets automatically installed depending on which desktop environment you select
#gnome
#plasma
#lxqt
#mate
#xfce4
#xfce4-goodies

# browsers
#firefox
#chromium
#qutebrowser

# other stuff
neofetch
#man-db
#pulseaudio
#xorg
EOF

echo ""

# many mistakes happen here, you are allowed to make mistakes
set +e

while true; do
	# edit package list
	echo "Add/uncomment packages which you want in the package list"
	echo "${yellow}Linux, the firmware, polkit, nano, and neofetch are installed by default$end"
	echo "(also base and base-devel but you can't remove those because the installer dies)"
	echo ""
	
	while true; do
	read -n 1 -rp "Do you want to edit the package list with (n)ano, (v)im, or (s)kip? [nano] " editor
	echo ""
	
	case $editor in
		N | n | "" ) nano packages; break ;;
		V | v ) vim packages; break ;;
		S | s ) echo "Skipping package list editing..."; break ;;
		* )
			echo "${red}Invalid option!$end"
			echo ""
			;;
	esac
	done # while loop
	
	echo ""
	
	# take the packages list and get rid of the comments
	echo "Cleaning up the package list..."
	grep -v "#" packages > packagesclean
	
	echo ""
	
	# put the DE service in a variable and install extra packages if needed
	if grep -Fxq "gnome" packagesclean; then
		dm="gdm"
		de=y
	elif grep -Fxq "plasma" packagesclean; then
		dm="sddm"
		de=y
		echo "konsole" >> packagesclean
	elif grep -Fxq "lxqt" packagesclean || grep -Fxq "mate" packagesclean || grep -Fxq "xfce4" packagesclean; then
		dm="lightdm"
		de=y
		echo "lightdm" >> packagesclean
		echo "lightdm-gtk-greeter" >> packagesclean
		echo "xorg-server" >> packagesclean
	fi
	
	# read the package list and install those packages
	echo "${green}Installing the packages with pacstrap...$end"
	echo ""
	pacstrap $mountpoint base base-devel - < packagesclean

	case $? in
		0 ) break ;;
		* ) 
			echo ""
			echo "${red}Something went wrong!$end"
			echo "Read pacstrap message above"
			echo "Perhaps a space at the end of a package name?"
			read -n 1 -rsp "Press any key to retry... "
			clear
			;;
	esac

done # while loop

# no more mistakes
set -e

echo ""

# make the fstab
echo "Generating the fstab..."
genfstab -U $mountpoint >> $mountpoint/etc/fstab

clear

# declare stuff
echo "Declaring variables..."
declare -p boot disk dm de fs removable username > $mountpoint/varstuff

echo ""

# write the second script
echo "${green}Writing the second script...$end"
echo ""

#----------------------------------------------------------------------------------------------------------------------
#======================================================================================================================
# START OF SCRIPT 2
cat << 'EOF' > $mountpoint/archstall2
#!/bin/bash

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
end=$(tput sgr0)

# exit if a command fails
set -e

# source the variables
source /varstuff

userstuff() {
	echo "Adding user ${yellow}$username$end"
	useradd -m "$username"
	echo "Setting the ${yellow}user$end password..."
	passwd "$username"
	
	# create sudo group
	groupadd sudo
	# adding user to sudo group and making the sudo group have sudo stuff
	gpasswd -a "$username" sudo
	sed -i 's/# %sudo/%sudo/g' /etc/sudoers
	
	while true; do
	# AUR helper
	read -n 1 -rp "Install ${yellow}paru$end? [n] " aur
	echo ""
	case $aur in
		Y | y )
			pacman -S git base-devel --noconfirm
			cd /home/$username
			sudo -u $username git clone https://aur.archlinux.org/paru-bin.git
			cd paru-bin
			sudo -u $username makepkg -si --noconfirm
			cd ..
			rm -rf paru-bin
			break
			;;
		
		N | n | "" )
			echo "Skipping..."
			break
			;;
		
		* )
			echo "${red}Invalid option!$end"
			echo ""
			;;
	esac
	done # while loop
}

# select timezone stuff
ls /usr/share/zoneinfo
echo ""

while true; do
read -rp "Select your ${yellow}region$end: " region

if [[ -d /usr/share/zoneinfo/"$region" ]]; then
	while true; do
	echo ""
	# same but for city
	ls /usr/share/zoneinfo/"$region"
	echo ""
	read -rp "Select your ${yellow}city$end: " city
	
	if [[ -f /usr/share/zoneinfo/"$region"/"$city" ]]; then
		echo ""
		echo "Setting the ${bold}timezone$end..."
		ln -sf /usr/share/zoneinfo/"$region"/"$city" /etc/localtime
		break
	else
		echo "${red}Invalid option!$end"
		echo ""
	fi
	
	done # while loop
	break

elif [[ -f /usr/share/zoneinfo/"$region" ]]; then
	echo "Setting the ${bold}timezone$end..."
	ln -sf /usr/share/zoneinfo/"$region" /etc/localtime
	break

else 
	echo "${red}Invalid option!$end"
	echo ""
fi

done # while loop

echo ""

# somethingsomething time
echo "Generating ${bold}/etc/adjtime$end..."
hwclock --systohc

echo ""

# locale stuff (???)
echo "Setting the ${bold}locale$end..."
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

clear

read -rp "${yellow}hostname$end [localhost] : " hostname
echo "Setting the ${yellow}hostname$end..."
case $hostname in
	"" ) echo localhost > /etc/hostname ;;
	*  ) echo "$hostname" > /etc/hostname ;;
esac

echo ""

echo "Setting the ${red}root$end password..."
passwd

echo ""

case $username in
	n ) 
		read -rp "What do you want to name your ${yellow}user$end? ${yellow}(leave empty for no user)$end " usernametmp
		username="${usernametmp,,}"
		case $username in
				"" ) echo "Skipping..." ;;
				* ) userstuff ;;
		esac
		;;
		
	* ) userstuff ;;
esac

clear

while true; do
# network setup
read -n 1 -rp "Configure ${yellow}systemd-network(d)$end, ${yellow}(N)etworkManager$end, or (s)kip? [systemd-networkd] " network
echo ""; echo ""

case $network in
	D | d | "" )
		# takes the long `ip a` output and shortens it down to just the interfaces
		interfaces=$(ip a | grep "<" | cut -d':' -f2 | cut -c 2- | grep -v lo)
		echo "$interfaces"
		echo ""

		while true; do
		read -rp "Select your ${yellow}interface$end: " interface
		if [[ "$interfaces" == *"$interface"* ]]; then
			break
		else
			echo "${red}Interface doesn't exist!$end"
			echo ""
		fi
		done # while loop
		
		echo ""
		
		# the cat EOF thing doesn't work
		echo "Writing configuration file and enabling services..."
		echo "[Match]" > /etc/systemd/network/20-network.network
		echo "Name=$interface" >> /etc/systemd/network/20-network.network
		echo "[Network]" >> /etc/systemd/network/20-network.network
		echo "DHCP=yes" >> /etc/systemd/network/20-network.network
		
		systemctl enable systemd-networkd systemd-resolved
		
		break
		;;
	
	N | n )
		echo "Installing NetworkManager..."
		pacman -S networkmanager --noconfirm
		echo ""
		echo "Enabling service..."
		systemctl enable NetworkManager
		
		break
		;;
	
	S | s )
		echo "Skipping..."
		break
		;;
	
	* )
		echo "${red}Invalid option!$end"
		echo ""
		;;
esac
done # while loop

echo ""

# swapfile
case $fs in
	btrfs ) 
		echo "${red}Swapfiles aren't supported on btrfs$end"
		echo "(well I can't get them to work)"
		echo ""
		read -n 1 -rsp "Press any key to continue... "
		;;
	
	* )
		while true; do

		read -n 1 -rp "Use a ${blue}Swapfile$end? [n] " swap
		echo ""
		
		case $swap in
			Y | y )
				read -rp "Swapfile size (in MiB) [1024]: " swapsize
				
				# if no input is given, default to 1024
				case "$swapsize" in
					"" ) swapsize=1024 ;;
				esac
				
				echo "Making Swap..."
				dd if=/dev/zero of=/swapfile bs=1M count=$swapsize status=progress
				chmod 600 /swapfile
				mkswap /swapfile
				swapon /swapfile
				echo "/swapfile none swap defaults 0 0" >> /etc/fstab
				break
				;;	
			
			N | n | "" )
				echo "Skipping..."
				break
				;;
			
			* )
				echo "${red}Invalid option!$end"
				echo ""
				;;	
		esac
		done # while loop
		
		echo ""
		;;			
esac

# enable services
case $de in
	y )
		echo ""
		echo "Enabling DE-specific service..."
		systemctl enable "$dm"
		;;
esac

clear

echo "${green}Installing the CPU microcode...$end"
echo ""
case $removable in
	y )
		# install both because removable
		pacman -S amd-ucode intel-ucode --noconfirm
		;;
	n )
		while true; do
		# read CPU vendor (for microcode)
		read -n 1 -rp "${blue}Intel$end or ${red}AMD$end CPU? " cpu
		echo ""
		
		case $cpu in
			a | A ) pacman -S amd-ucode --noconfirm; break ;;
			i | I ) pacman -S intel-ucode --noconfirm; break ;;
			* )	
				echo "${red}Invalid option!$end"
				echo ""
				;;
		esac
		
		done # while loop
		;;
esac

echo ""

# bootloader
echo "${green}Installing GRUB...$end"
echo ""

# different installation methods based on the boot mode
case $boot in
	uefi )
		pacman -S grub efibootmgr --noconfirm
		echo ""
		case $removable in
			y ) grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB --removable --recheck ;;
			n ) grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB ;;
		esac
		;;
	
	bios )
		pacman -S grub --noconfirm
		echo ""
		case $removable in
			y ) grub-install /dev/"$disk" --recheck ;;
			n ) grub-install /dev/"$disk" ;;
		esac
		;;
esac

echo ""

# make le grub config
echo "${green}Writing GRUB configuration file...$end"
echo ""
grub-mkconfig -o /boot/grub/grub.cfg

exit

EOF
# END OF SCRIPT 2
#======================================================================================================================
#----------------------------------------------------------------------------------------------------------------------

chmod +x $mountpoint/archstall2

# chroot in and run the second script
echo "${green}Chrooting...$end"
echo ""
arch-chroot $mountpoint /archstall2

clear

# cleanup
echo "Cleaning up files..."
rm $mountpoint/archstall2 $mountpoint/varstuff

echo ""

# unmount the filesystems
echo "Unmounting the filesystems..."
umount -R $mountpoint

echo ""

# reboot
echo "${bold}${green}Installation finished!$end"
read -n 1 -rsp  "Press any key to reboot... "
echo ""

reboot
