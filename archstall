#!/bin/bash
# Archstall Arch Linux installer made by PowerMan2206.

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
italic=$(tput sitm)
end=$(tput sgr0)

# exit if a command fails
set -e

mountpoint=/mnt

while getopts "hp:e:lf:m:s:u:n:r" arg; do
	case "$arg" in
		h | help )
			echo "${bold}${green}Archstall Arch Linux installer $end"
			echo "${bold}https://github.com/PowerMan2206/archstall"
			echo ""
			echo "Usage:$end"
			echo "--help            -h              show this help menu and exit"
			echo "--root-partition  -p [partition]  partition on which to install Arch"
			echo "--efi-partition   -e [partition]  EFI partition ${bold}(UEFI systems only)$end"
			echo "${bold}  heads up: the selected root/EFI partition will be wiped!$end"
			echo "--luks            -l              use LUKS1 encryption on the root partition"
			echo "--filesystem      -f [filesystem] Filesystem to use on the root partition ([ext4], btrfs, xfs)"
			echo "--mountpoint      -m [location]   root partition mountpoint [/mnt]"
			echo "${yellow}--swapfile        -s [number]$end     swapfile size (in MiB) [n]"
			echo "${yellow}--username        -u [username]$end   change default user username [n]"
			echo "--hostname        -n [hostname]   change hostname [localhost]"
			echo "--removable       -r              install on a removable device [n]"
			echo "just running the script           runs the script in an \"interactive\" mode"
			echo ""
			echo "Setting any of the ${yellow}yellow$end arguments as \`n\`"
			echo "skips them in the installation process"
			echo ""
			
			exit
			;;
		
		p | root-partition ) 
			if [[ "$(lsblk)" == *"$OPTARG"* ]]; then
				rootpartition="$OPTARG"
			else
				echo "${red}Root partition doesn't exist!$end"
				echo ""
				exit 1
			fi
			;;
		
		e | efi-partition )
			if [[ "$(lsblk)" == *"$OPTARG"* ]]; then
				efipartition="$OPTARG"
			else
				echo "${red}EFI partition doesn't exist!$end"
				echo ""
				exit 1
			fi
			;;

		l | luks ) luks=y ;;
		f | filesystem )
			case "$OPTARG" in
				ext4 | btrfs | xfs ) filesystem="$OPTARG" ;;
				* ) 
					echo "${red}Invalid filesystem!$end"
					echo ""
					exit 1
					;;
			esac
			;;
		
		m | mountpoint ) 
			if [[ -d "$mountpoint" ]]; then
				mountpoint="$OPTARG"
			else
				echo "${red}Mountpoint doesn't exist!"
				echo ""
				exit 1
			fi
			;;
		
		s | swapfile ) swapsize="$OPTARG" ;;
		u | username ) username="${OPTARG,,}" ;;
		n | hostname ) hostname="$OPTARG" ;;
		r | removable ) removable=y ;;
		? )
			echo "${red}Invalid flag!$end"
			echo ""
			exit 1
			;;
	esac
done

#functions
invalidoption() {
	echo "${red}Invalid option!$end"
	echo ""
}

selectfs() {
	if [[ -z "$filesystem" ]]; then
		while true; do
		read -n 1 -rp "Select the ${bold}root filesystem$end: ext(4), (x)fs, (b)trfs [ext4] " filesystem
		echo ""
		
		case "$filesystem" in
			E | e | 4 | "" ) filesystem=ext4; break ;;
			B | b ) filesystem=btrfs; break ;;
			X | x ) filesystem=xfs; break ;;
			* ) invalidoption ;;
		esac
		done # while loop
	fi
}

selectpartitions() {
	# ask for the root partition
	rootdisks="$(lsblk | grep $disk)"
	echo "$rootdisks"
	echo ""
	
	while true; do
	read -rp "What's the ${bold}root partition${end}? /dev/" rootpartition
	if [[ "$rootdisks" != *"$rootpartition"* ]] || [[ "$rootpartition" == "" ]]; then
			echo "${red}Partition doesn't exist!$end"
			echo ""
	elif [[ "$rootdisks" == *"$rootpartition"* ]]; then
		break
	fi
	done # while loop
	
	echo ""
	
	# also EFI partition if in UEFI
	selectefipartition
}

selectefipartition() {
	if [[ -n "$uefi" ]] && [[ -z "$efipartition" ]]; then
		efidisks="$(lsblk | grep -v $rootpartition)"
		echo "$efidisks"
		echo ""
		
		while true; do
		read -rp "What's the ${bold}EFI partition${end}? /dev/" efipartition
		if [[ "$efidisks" == *"$efipartition"* ]]; then
			formatefipartition
			break
		elif [[ "$efidisks" != *"$efipartition"* ]] || [[ "$efipartition" == "" ]]; then
			echo "${red}Partition doesn't exist!$end"
			echo ""
		fi
		done # while loop
		echo ""
	elif [[ -n "$uefi" ]]; then
		formatefipartition
		echo ""
	fi
}

formatefipartition() {
	echo "${green}Formatting the ${bold}EFI partition$end ${green}to FAT32...$end"
	echo ""
	mkfs.fat -F32 /dev/"$efipartition"
}

clear 

echo "${bold}${green}Archstall Arch Linux installer $end"
echo "${red}This script comes with no warranty, screwing up your system is your fault
You can cancel the script at any time by holding down Ctrl+C $end"

if [[ -n "$removable" ]]; then
	echo "Installation for a removable device"
fi

echo ""
read -n 1 -rsp "Press any key to continue... "
echo ""; echo ""

# delet packages file if it already exists
# (little dev stuff)
# ((yes it already gets nuked at the end but shush))
if [[ -f packages ]]; then rm packages; fi

# check the boot mode
if [[ -d /sys/firmware/efi/efivars ]]; then
	echo "System booted in ${bold}UEFI$end mode"
	uefi=y
else
	# notify user is booted in BIOS
	echo "System booted in ${bold}BIOS$end mode"
	echo "Reboot into ${bold}UEFI$end mode if you want to install for that."
fi

echo ""
read -n 1 -rsp "Press any key to continue or Ctrl+C to cancel..."
echo ""; echo ""

# set the system clock and wait a bit for the messages
echo "Ensuring the system clock is accurate..."
timedatectl set-ntp true; sleep 1 

clear

# unmount any thing in the mountpoint
if [[ $(findmnt "$mountpoint") ]]; then
	echo "Unmounting disks in $mountpoint..."
	umount -R "$mountpoint"
	echo ""
fi

if [[ -z "$rootpartition" ]]; then
	while true; do
		lsblk
		echo ""
		while true; do
		read -rp "Select the disk you want to use ${red}(not a partition)$end /dev/" disk
		if [[ "$(lsblk)" == *"$disk"* ]]; then
			break
		else
			echo "${red}Disk doesn't exist!$end"
			echo ""
		fi
		done # while loop
		
		read -n 1 -rp "(a)utomatic, (m)anual, or (s)kip disk partitioning? [automatic] " partitioning 
		echo ""
		
		case "$partitioning" in
			A | a | "" )
				if [[ -n "$uefi" ]]; then
					echo "The disk will be partitioned into a 512M ${bold}EFI partition$end and the ${bold}root partition$end taking up the rest"
				else
					echo "The disk will be partitioned into a single ${bold}root partition$end taking up the entire disk"
				fi

				echo ""
								
				echo "$bold${red}WARNING: THIS WILL ERASE EVERYTHING ON THE SELECTED DISK $end"
				read -rp "Are you sure you want to continue? You can cancel with Ctrl+C "
				
				echo ""
				echo -n "${red}Erasing disk in "
				# for loops aren't for nerds
				for delet in {5..1}; do
					sleep 0.4
					echo -n "$delet"
					sleep 0.4
					echo -n "."
					sleep 0.4
					echo -n "."
					sleep 0.4
					echo -n "."
				done
				echo "$end"

				echo ""

				if [[ -n "$uefi" ]]; then
					parted -s /dev/"$disk" mklabel gpt
					
					# make EFI partition
					echo "${green}Making the ${bold}EFI partition...$end"
					parted -s /dev/"$disk" mkpart P1 1MiB 512MiB
					efipartition="$(lsblk -r -o NAME | grep $disk | sort | sed 1d | sed -n 1p)"
					
					# format EFI partition
					formatefipartition
					
					echo ""
					
					# make root partition
					echo "${green}Making the ${bold}root partition...$end"
					parted -s /dev/"$disk" mkpart P2 512MiB 100%
					rootpartition="$(lsblk -r -o NAME | grep $disk | sort | sed 1d | sed -n 2p)"
				
				else					
					parted -s /dev/"$disk" mklabel msdos
					
					# make root partition
					echo "${green}Making the ${bold}root partition...$end"
					parted -s /dev/"$disk" mkpart primary 1MiB 100%
					parted -s /dev/"$disk" set 1 boot on
					rootpartition="$(lsblk -r -o NAME | grep $disk | sort | sed 1d | sed -n 1p)"
				fi

				selectfs
				break
				;;

			#manual partitioning
			M | m )
				while true; do
				read -n 1 -rp "Do you want to use (f)disk, (c)fdisk or (p)arted? [fdisk] " partitioner
				echo ""
				
				case "$partitioner" in
					F | f | "" ) fdisk /dev/"$disk"; break ;;
					C | c ) cfdisk /dev/"$disk"; break ;;
					P | p ) parted /dev/"$disk"; break ;;
					* ) invalidoption ;;	
				esac
				done # while loop

				echo ""

				selectpartitions
				selectfs
				clear
				break
				;;

			S | s )
				echo "Skipping..."
				echo ""
				selectpartitions
				selectfs
				break
				;;

			* ) invalidoption ;;
		esac
	done # while loop

else
	disk="$(lsblk -no pkname /dev/$rootpartition)"
	selectefipartition
	selectfs
fi

echo ""

# some luks stuff
if [[ -n "$luks" ]]; then
	echo "${green}Encrypting /dev/$rootpartition...$end"
	cryptsetup -y --type luks1 luksFormat /dev/"$rootpartition"
	echo ""
	echo "${green}Opening encrypted /dev/$rootpartition...$end"
	cryptsetup open /dev/"$rootpartition" cryptroot

	# set encrypted root partition var
	encrootpartition="mapper/cryptroot"
	# other var stuff
	oldrootpartition="$rootpartition"
	rootpartition="$encrootpartition"
	echo ""
fi

echo "${green}Formatting the ${bold}root partition$end ${green}to $filesystem...$end"
echo ""
case "$filesystem" in
	ext4 ) mkfs.ext4 -F /dev/"$rootpartition" ;;
	btrfs )
		mkfs.btrfs -f /dev/"$rootpartition"
		echo "btrfs-progs" >> packages
		;;
	
	xfs )
		mkfs.xfs -f /dev/"$rootpartition"
		echo "xfsprogs" >> packages
		;;	
esac

echo ""

# mount the partition/s
echo "Mounting the partitions..."
if [[ -n "$luks" ]]; then
	mount /dev/"$encrootpartition" "$mountpoint"
else
	mount /dev/"$rootpartition" "$mountpoint"
fi
if [[ -n "$uefi" ]]; then
	mkdir "$mountpoint"/efi
	mount /dev/"$efipartition" "$mountpoint"/efi
fi

if [[ -n "$luks" ]]; then rootpartition="$oldrootpartition"; fi

clear

# create the package list
echo "Writing the package list..."
cat << 'EOF' >> packages
linux
#linux-lts
linux-firmware
polkit

nano
#micro
#vim

# window managers (don't forget xorg)
#i3-gaps
#bspwm
#openbox
#xmonad
#awesome
#herbstluftwm
#xorg

# desktop environments (choose one)
# a display manager gets automatically installed 
# depending on which desktop environment you select
#gnome
#plasma
#lxqt
#mate
#xfce4
#xfce4-goodies

# browsers
#firefox
#chromium
#qutebrowser

# other stuff
neofetch
#man-db
#pulseaudio
EOF

echo ""
# you are allowed to make mistakes
set +e

while true; do
	# edit package list
	echo "Add/uncomment packages which you want in the package list"
	echo "${yellow}Linux, the firmware, polkit, nano, and neofetch are installed by default$end"
	echo "(also base and base-devel but you can't remove those because the installer dies)"
	echo ""
	
	while true; do
	read -n 1 -rp "Do you want to edit the package list with (n)ano, (v)im, or (s)kip? [nano] " editor
	echo ""
	
	case "$editor" in
		N | n | "" ) nano packages; break ;;
		V | v ) vim packages; break ;;
		S | s ) echo "Skipping package list editing..."; break ;;
		* ) invalidoption ;;
	esac
	done # while loop
	
	echo ""
	
	# take the packages list and get rid of the comments
	echo "Cleaning up the package list..."
	grep -v "#" packages > packagesclean
	
	echo ""
	
	# put the DE service in a variable and install extra packages if needed
	if grep -Fxq "gnome" packagesclean; then
		dm="gdm"
		de=y
	elif grep -Fxq "plasma" packagesclean; then
		dm="sddm"
		de=y
		echo "konsole" >> packagesclean
	elif grep -Fxq "lxqt" packagesclean || grep -Fxq "mate" packagesclean || grep -Fxq "xfce4" packagesclean; then
		dm="lightdm"
		de=y
		echo "lightdm" >> packagesclean
		echo "lightdm-gtk-greeter" >> packagesclean
		echo "xorg-server" >> packagesclean
	fi
	
	# read the package list and install those packages
	echo "${green}Installing packages with pacstrap...$end"
	echo ""
	pacstrap "$mountpoint" base base-devel - < packagesclean
	
	case $? in
		0 ) break ;;
		* ) 
			echo ""
			echo "${red}Something went wrong!$end"
			echo "Read pacstrap message above"
			echo "Perhaps a space at the end of a package name?"
			read -n 1 -rsp "Press any key to retry... "
			clear
			;;
	esac

done # while loop

# no more mistakes
set -e
echo ""

# make the fstab
echo "Generating the fstab..."
genfstab -U "$mountpoint" > "$mountpoint"/etc/fstab

clear

# it'll error out since it's probably declaring non-existant vars
set +e

# declare stuff and supress any error messages (expected)
echo "Declaring variables..."
declare -p uefi disk dm de filesystem removable username swapsize hostname luks rootpartition > "$mountpoint"/varstuff 2> /dev/null

set -e
echo ""

# write the second script
echo "${green}Writing the second script...$end"
echo ""

#----------------------------------------------------------------------------------------------------------------------
#======================================================================================================================
# START OF SCRIPT 2
cat << 'EOF' > "$mountpoint"/archstall2
#!/bin/bash

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
end=$(tput sgr0)

# exit if a command fails
set -e

# source the variables
. /varstuff

# functions
invalidoption() {
	echo "${red}Invalid option!$end"
	echo ""
}

userstuff() {
	echo "Adding user ${yellow}$username$end"
	useradd -m "$username"
	echo "Setting the ${yellow}user$end password..."
	passwd "$username"
	
	# create sudo group
	groupadd sudo
	# adding user to sudo group and making the sudo group have sudo stuff
	gpasswd -a "$username" sudo
	sed -i 's/# %sudo/%sudo/g' /etc/sudoers
	
	while true; do
	# AUR helper
	read -n 1 -rp "Install ${yellow}paru$end? [n] " aur
	echo ""
	case $aur in
		Y | y )
			pacman -S git base-devel --noconfirm
			cd /home/"$username"
			sudo -u "$username" git clone https://aur.archlinux.org/paru-bin.git
			cd paru-bin
			sudo -u "$username" makepkg -si --noconfirm
			cd ..
			rm -rf paru-bin
			break
			;;
		
		N | n | "" )
			echo "Skipping..."
			break
			;;
		
		* ) invalidoption ;;
	esac
	done # while loop
}

swapstuff() {
	# if no input is given, default to 1024
	case "$swapsize" in
		"" ) swapsize=1024 ;;
	esac
	
	# btrfs stuff
	case "$filesystem" in
		btrfs )
			truncate -s 0 /swapfile
			chattr +C /swapfile
			btrfs property set /swapfile compression none
			;;
	esac
	
	echo "Making Swap..."
	dd if=/dev/zero of=/swapfile bs=1M count="$swapsize" status=progress
	chmod 600 /swapfile
	mkswap /swapfile
	swapon /swapfile
	echo "/swapfile none swap defaults 0 0" >> /etc/fstab
}

# select timezone stuff
ls /usr/share/zoneinfo
echo ""

while true; do
read -rp "Select your ${yellow}region$end: " region

if [[ -d /usr/share/zoneinfo/"$region" ]]; then
	while true; do
	echo ""
	# same but for city
	ls /usr/share/zoneinfo/"$region"
	echo ""
	read -rp "Select your ${yellow}city$end: " city
	
	if [[ -f /usr/share/zoneinfo/"$region"/"$city" ]]; then
		echo ""
		echo "Setting the ${bold}timezone$end..."
		ln -sf /usr/share/zoneinfo/"$region"/"$city" /etc/localtime
		break
	else
		invalidoption
	fi
	
	done # while loop
	break

elif [[ -f /usr/share/zoneinfo/"$region" ]]; then
	echo "Setting the ${bold}timezone$end..."
	ln -sf /usr/share/zoneinfo/"$region" /etc/localtime
	break

else 
	invalidoption
fi

done # while loop

echo ""

# somethingsomething time
echo "Generating ${bold}/etc/adjtime$end..."
hwclock --systohc

echo ""

# locale stuff (???)
echo "Setting the ${bold}locale$end..."
sed -i 's/#en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/g' /etc/locale.gen
locale-gen
echo "LANG=en_US.UTF-8" > /etc/locale.conf

clear

if [[ -z "$hostname" ]]; then
	read -rp "${yellow}hostname$end [localhost] : " hostname
	case "$hostname" in
		"" ) echo localhost > /etc/hostname ;;
		*  ) echo "$hostname" > /etc/hostname ;;
	esac
else
	echo "$hostname" > /etc/hostname
fi

echo "Setting the ${yellow}hostname$end..."

echo ""

echo "Setting the ${red}root$end password..."
passwd

echo ""

if [[ -z "$username" ]]; then
	read -rp "What do you want to name your ${yellow}user$end? (empty for no user) " usernametmp
	username="${usernametmp,,}"
	case "$username" in
			"" ) echo "Skipping..." ;;
			* ) userstuff ;;
	esac
elif [[ "$username" != n ]]; then 
	userstuff
elif [[ "$username" == n ]]; then :
fi

clear

while true; do
# network setup
read -n 1 -rp "Configure ${yellow}systemd-network(d)$end, ${yellow}(N)etworkManager$end, or (s)kip? [systemd-networkd] " network
echo ""

case "$network" in
	D | d | "" )
		# takes the long `ip a` output and shortens it down to just the interfaces
		interfaces="$(ip a | grep "<" | cut -d':' -f2 | cut -c 2- | grep -v lo)"
		echo "$interfaces"
		echo ""
		
		while true; do
		read -rp "Select your ${yellow}interface$end: " interface
		if [[ "$interfaces" != *"$interface"* ]] || [[ "$interface" == "" ]]; then
			echo "${red}Interface doesn't exist!$end"
			echo ""
		elif [[ "$interfaces" == *"$interface"* ]]; then
			break
		fi
		done # while loop
		
		echo ""

		# cat thing doesn't work for some reason
		echo "${green}Writing configuration file and enabling services...$end"
		echo "[Match]" > /etc/systemd/network/20-network.network
		echo "Name=$interface" >> /etc/systemd/network/20-network.network
		echo "[Network]" >> /etc/systemd/network/20-network.network
		echo "DHCP=yes" >> /etc/systemd/network/20-network.network
		
		echo "${green}Enabling services...$end"
		systemctl enable systemd-networkd systemd-resolved
		
		break
		;;
	
	N | n )
		echo "Installing NetworkManager..."
		pacman -S networkmanager --noconfirm
		echo ""
		echo "${green}Enabling service...$end"
		systemctl enable NetworkManager
		
		break
		;;
	
	S | s )
		echo "Skipping..."
		break
		;;
	
	* ) invalidoption ;;
esac
done # while loop

echo ""

if [[ -z "$swapsize" ]]; then
	while true; do
		read -n 1 -rp "Use a ${blue}Swapfile$end? [n] " swap
		echo ""
		
		case "$swap" in
			Y | y )
				read -rp "Swapfile size (in MiB) [1024]: " swapsize
				swapstuff
				break
				;;	
			
			N | n | "" )
				echo "Skipping..."
				break
				;;
			
			* ) invalidoption ;;
		esac
	done # while loop
elif [[ "$swapsize" != n ]]; then
	swapstuff
elif [[ "$swapsize" == n ]]; then :
fi

echo ""

# enable DE services
if [[ -n "$de" ]]; then
	echo ""
	echo "Enabling DE-specific service..."
	systemctl enable "$dm"
fi

clear

echo "${green}Installing the CPU microcode...$end"
echo ""
if [[ -n "$removable" ]]; then
	# install both because removable
	pacman -S amd-ucode intel-ucode --noconfirm
else
	while true; do
	# read CPU vendor (for microcode)
	read -n 1 -rp "${blue}Intel$end or ${red}AMD$end CPU? " cpu
	echo ""
	
	case "$cpu" in
		a | A ) pacman -S amd-ucode --noconfirm; break ;;
		i | I ) pacman -S intel-ucode --noconfirm; break ;;
		* )	invalidoption ;;
	esac
	
	done # while loop
fi

echo ""

# bootloader
echo "${green}Installing GRUB...$end"
echo ""

pacman -S grub --noconfirm
echo ""

# extra stuff needed for LUKS
if [[ -n "$luks" ]]; then
	echo "${green}Doing LUKS stuff..."
	
	rootuuid="$(ls -l /dev/disk/by-uuid | grep $rootpartition | cut -d' ' -f9)"
	sed -i 's/#GRUB_ENABLE_CRYPTODISK/GRUB_ENABLE_CRYPTODISK/g' /etc/default/grub
	sed -i "s/GRUB_CMDLINE_LINUX_DEFAULT=\"/GRUB_CMDLINE_LINUX_DEFAULT=\"cryptdevice=UUID=$rootuuid:cryptroot /g" /etc/default/grub
	
	# also does it on the comment but ehh
	sed -i 's/autodetect/autodetect keyboard keymap /g' /etc/mkinitcpio.conf
	sed -i 's/block/block encrypt /g' /etc/mkinitcpio.conf

	mkinitcpio -P
	echo ""
fi

# different installation methods based on the boot mode
if [[ -n "$uefi" ]]; then
	pacman -S efibootmgr --noconfirm
	echo ""
	if [[ -n "$removable" ]]; then
		grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB --removable --recheck
	else
		grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB
	fi
else
	if [[ -n "$removable" ]]; then
		grub-install /dev/"$disk" --recheck
	else
		grub-install /dev/"$disk"
	fi
fi

echo ""

# make le grub config
echo "${green}Writing GRUB configuration file...$end"
echo ""
grub-mkconfig -o /boot/grub/grub.cfg

exit

EOF
# END OF SCRIPT 2
#======================================================================================================================
#----------------------------------------------------------------------------------------------------------------------

chmod +x "$mountpoint"/archstall2

# chroot in and run the second script
echo "${green}Chrooting...$end"
echo ""
arch-chroot "$mountpoint" /archstall2

clear

# cleanup
echo "Cleaning up files..."
rm "$mountpoint"/archstall2 "$mountpoint"/varstuff packages packagesclean

echo ""

# sometimes it fails here so eh
set +e

#wait a bit because yes
sleep 1

# unmount the filesystems
echo "Unmounting the filesystems..."
umount -R "$mountpoint"

# luks stuff
if [[ -n "$luks" ]]; then cryptsetup close /dev/"$encrootpartition"; fi

echo ""

# reboot
echo "${bold}${green}Installation finished!$end"
read -n 1 -rsp  "Press any key to reboot... "
echo ""

reboot
