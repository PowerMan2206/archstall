#!/bin/bash

#
# Archstall Arch Linux installer made by PowerMan2206.
#

# set style variables
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
bold=$(tput bold)
italic=$(tput sitm)
end=$(tput sgr0)

case $1 in
	--help | -h )
		echo "${bold}${green}Archstall Arch Linux installer$end"
		echo "This script is made by PowerMan2206"
		echo "https://github.com/PowerMan2206/archstall"
		echo ""
		echo "Usage:"
		echo "${bold}  --help | -h$end"
		echo "    show this help menu and exit"
		echo "${bold}  just running the script$end"
		echo "    run Archstall"
		echo ""
		echo "${italic}more coming soon maybe$end"
		echo ""
		
		exit
		;;
esac

clear

echo "${bold}${green}Archstall Arch Linux installer $end"
echo "${red}This script comes with no warranty, screwing up your system is your fault
You can cancel the script at any time by holding down Ctrl+C $end"
echo ""
read -p "Press any key to continue... "
echo ""

# check the boot mode
if [[ -d /sys/firmware/efi/efivars ]]; then
	boot="uefi"
	echo "System booted in ${bold}UEFI$end mode"
else
	boot="bios"
	echo "System booted in ${bold}BIOS$end mode"
fi

echo ""

# set the system clock and wait a bit for the messages
echo "Ensuring the system clock is accurate..."
timedatectl set-ntp true; sleep 1

echo ""

# get the disk to partition
lsblk
echo ""
read -p "Select the disk you want to use ${red}(not a partition) $end" disk
echo ""

# automatic or manual disk partitioning?
read -p "Want (a)utomatic or (m)anual disk partitioning? [automatic] " partitioning 
echo ""
	
case $partitioning in
	# automatic partitioning
	automatic | a | "" )
		echo "$bold${red}WARNING: THIS WILL ERASE EVERYTHING ON THE SELECTED DISK $end"
		read -p "Are you sure you want to continue? You can cancel with Ctrl+C "
		echo ""
	
		case $boot in
			uefi )
				parted /dev/$disk mklabel gpt

				echo "${green}Making the ${bold}EFI partition...$end"
				parted /dev/$disk mkpart P1 1MiB 512MiB
				echo "${green}Formatting the EFI partition to FAT32...$end"
				mkfs.fat -F32 /dev/${disk}1
				efipartition=${disk}1

				echo ""
			
				echo "${green}Making the ${bold}root partition...$end"
				parted /dev/$disk mkpart P2 512MiB 100%
				rootpartition=${disk}2

				;;

			bios )
				parted /dev/$disk mklabel msdos
				
				echo "${green}Making the ${bold}root partition...$end"
				parted /dev/$disk mkpart primary 1MiB 100%
				parted /dev/$disk set 1 boot on
				rootpartition=${disk}1

				;;
		esac

		;;

	# manual partitioning
	manual | m )
		read -p "Do you want to use (f)disk, (c)fdisk, or (p)arted? [fdisk] " partitioner

		case $partitioner in
			f | fdisk ) fdisk /dev/$disk ;;
			c | cfdisk ) cfdisk /dev/$disk ;;
			p | parted ) parted /dev/$disk ;;
		esac

		echo ""
		
		case $boot in
			uefi )
				lsblk
				echo ""
				read -p "What's the ${bold}EFI$end partition? " efipartition

				echo ""
				read -p "What's the ${bold}root$end partition? " rootpartition

				echo ""
				echo "${green}Formatting the EFI partition to FAT32...$end"
				mkfs.fat -F32 /dev/$efipartition
				
				;;

			boot )
				lsblk
				echo ""
				read -p "What's the ${bold}root$end partition? " rootpartition
				
				;;
		esac
		
		;;		
esac

read -p "Select the root filesystem: ext(4), (x)fs [ext4] " fs
echo ""

case $fs in
	ext4 | 4 | "" )
		echo "Formatting the root partition to ext4..."
		mkfs.ext4 -f /dev/$rootpartition
		;;

	# later
	#btrfs | b )
		#echo "Formatting the root partition to btrfs..."
		#mkfs.btrfs -f /dev/$rootpartition
		## will add subvolumes when I figure out how they work
		#;;
						
	xfs | x )
		echo "Formatting the root partition to xfs..."
		mkfs.xfs -f /dev/$rootpartition
		;;			
esac

echo ""

# mount the partition/s
echo "Mounting the partitions..."
case $boot in
	uefi )
		mount /dev/$rootpartition /mnt
		mkdir /mnt/efi
		mount /dev/$efipartition /mnt/efi
		;;

	bios )
		mount /dev/$rootpartition /mnt
		;;
esac

clear

# download the package list
echo "${green}Downloading the package list...$end"
echo ""
curl https://raw.githubusercontent.com/PowerMan2206/archstall/master/packages > packages
echo ""

# edit package list
echo "Add/uncomment packages which you want in the packages file"
echo "(the ones already uncommented are basically must-haves)"
echo ""
read -p "Do you want to edit the package list with (n)ano, (v)im, or (s)kip? [nano] " editor
echo ""

case $editor in
	nano | n | "" )
		nano packages ;;
	vim | v )
		vim packages ;;
	skip | s )
		echo "Skipping package list editing..." ;;
esac

echo ""

# take the packages list and get rid of the comments
echo "Cleaning up the package list..."
cat packages | grep -v "#" > packagesclean

echo ""

# put the DE service in a variable and install extra packages if needed
if grep -Fxq "gnome" packagesclean; then
	dm="gdm"
	de="y"
elif grep -Fxq "plasma" packagesclean; then
	dm="sddm"
	de="y"
	echo "konsole" >> packagesclean
elif grep -Fxq "lxqt" packagesclean || grep -Fxq "mate" packagesclean || grep -Fxq "xfce4" packagesclean; then
	dm="lightdm"
	de="y"
	echo "lightdm" >> packagesclean
	echo "lightdm-gtk-greeter" >> packagesclean
	echo "xorg-server" >> packagesclean
fi

# read the package list and install those packages
echo "Installing the packages with pacstrap..."
# actual installing
pacstrap /mnt - < packagesclean

echo ""

# make the fstab
echo "Generating the fstab..."
genfstab -U /mnt >> /mnt/etc/fstab

echo ""

# downloading the second script from GitHub and preparing stuff
echo "${green}Downloading the second script...$end"
echo ""
curl https://raw.githubusercontent.com/PowerMan2206/archstall/master/archstall2 > /mnt/archstall2
chmod +x /mnt/archstall2
echo $boot > /mnt/bootmode
echo $disk > /mnt/diskthing
echo $dm > /mnt/dm
echo $de > /mnt/de

clear

# chroot in and run the second script
arch-chroot /mnt /archstall2

clear

# cleanup
echo "Cleaning up files..."
rm /mnt/archstall2 /mnt/bootmode /mnt/diskthing /mnt/dm /mnt/de

echo ""

# unmount the filesystems
echo "Unmounting the filesystems..."
umount -R /mnt 

echo ""

# reboot
echo "${bold}${green}Installation finished!$end"
read -p "Press any key to reboot... "
reboot
